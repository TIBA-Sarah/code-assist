const express = require('express');
const mongoose = require('mongoose');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('./models/User'); // Import du mod√®le utilisateur
const Code = require('./models/Code'); // Import du mod√®le Code

const app = express();
app.use(express.json());  // Pour lire les requ√™tes JSON

const PORT = process.env.PORT || 3000;

/*
// Connexion √† MongoDB
mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
.then(() => console.log("‚úÖ MongoDB connect√© !"))
.catch(err => console.error("‚ùå Erreur MongoDB :", err));
*/


// Route d'inscription (register)
app.post('/api/register', async (req, res) => {
    try {
        const { username, email, password } = req.body;
        const user = new User({ username, email, password });
        await user.save();
        res.status(201).json({ message: "Utilisateur cr√©√© avec succ√®s !" });
    } catch (error) {
        res.status(400).json({ message: "Erreur lors de la cr√©ation de l'utilisateur", error });
    }
});

// Route de connexion (login)
app.post('/api/login', async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });
        if (!user) return res.status(400).json({ message: "Utilisateur introuvable" });

        const isMatch = await user.comparePassword(password);
        if (!isMatch) return res.status(400).json({ message: "Mot de passe incorrect" });

        // Cr√©ation du token JWT
        const token = jwt.sign({ id: user._id }, 'secret_key', { expiresIn: '1h' });
        res.status(200).json({ token });
    } catch (error) {
        res.status(400).json({ message: "Erreur lors de la connexion", error });
    }
});

// Route pour g√©n√©rer un code
app.post('/api/generate-code', async (req, res) => {
    try {
        const code = Math.random().toString(36).substring(2, 15); // G√©n√©rer un code al√©atoire
        const newCode = new Code({ code });
        await newCode.save();
        res.status(201).json({ message: "Code g√©n√©r√© avec succ√®s", code: newCode });
    } catch (error) {
        res.status(400).json({ message: "Erreur lors de la g√©n√©ration du code", error });
    }
});
/*
// Route de test
app.get("/", (req, res) => {
    res.send("Serveur Express fonctionne ! üöÄ");
});
*/

// Connexion √† MongoDB
mongoose.connect('mongodb://localhost:27017/codegenerator', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
    .then(() => console.log('‚úÖ MongoDB connect√© avec succ√®s'))
    .catch(err => console.error('‚ùå √âchec de la connexion √† MongoDB', err));
  
  // Route de test pour v√©rifier que le serveur fonctionne
  app.get('/', (req, res) => {
    res.send('Serveur Express connect√© √† MongoDB');
  });

  // Route pour r√©cup√©rer et afficher tous les utilisateurs
app.get('/api/users', async (req, res) => {
    try {
      // R√©cup√©rer tous les utilisateurs depuis la collection 'users'
      const users = await User.find(); // Utilise la m√©thode .find() de Mongoose pour r√©cup√©rer tous les utilisateurs
      
      // V√©rifier s'il y a des utilisateurs
      if (!users.length) {
        return res.status(404).json({ message: 'Aucun utilisateur trouv√©' });
      }
  
      // Retourner la liste des utilisateurs au format JSON
      res.status(200).json(users);
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des utilisateurs', error);
      res.status(500).json({ message: 'Erreur interne du serveur', error });
    }
  });  
  
// D√©marrer le serveur
app.listen(PORT, () => {
    console.log(`‚úÖ Serveur d√©marr√© sur http://localhost:${PORT}`);
});
